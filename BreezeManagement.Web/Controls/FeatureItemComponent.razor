@inject NavigationManager NavigationManager
@inject IDeleteFeatureUseCase DeleteFeatureUseCase

@if (Feature != null)
{

    <tr>
        <td>@Feature.FeatureName</td>
        <td>@Feature.Description</td>
        <td>@Feature.AddedPrice.ToString("c")</td>
        <td>
            <button type="button" class="btn btn-light" @onclick="@(()=> EditFeature(Feature.FeatureId))">Edit</button>
            <button type="button" class="btn btn-light" @onclick="@(async ()=> await DeleteFeature(Feature))">Delete</button>
        </td>
    </tr>
}

@code {

    [Parameter]
    public Feature? Feature { get; set; }

    [Parameter]
    public EventCallback OnFeatureDeleted { get; set; }

    private void EditFeature(int featureId)
    {
        NavigationManager.NavigateTo($"/editfeature/{featureId}");
    }

    private async Task DeleteFeature(Feature feature)
    {
        await DeleteFeatureUseCase.ExecuteAsync(feature.FeatureId);

        await OnFeatureDeleted.InvokeAsync();
    }

}