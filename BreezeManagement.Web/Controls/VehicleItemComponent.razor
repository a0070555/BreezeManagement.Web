@inject NavigationManager NavigationManager
@inject IDeleteVehicleUseCase DeleteVehicleUseCase
@inject IJSRuntime JsRuntime

@if (Vehicle != null)
{
    <tr>
        <td>@Vehicle.Registration</td>
        <td>@Vehicle.ModelName</td>
        <td>@Vehicle.Colour</td>
        <td>@Vehicle.Price.ToString("c")</td>
        <td>@Vehicle.DateOfManufacture.ToShortDateString()</td>
        <td>@Vehicle.NumberOfOwners</td>
        <td>@Vehicle.Mileage</td>
        <td>
            <button type="button" class="button-21" @onclick="@(()=> ViewVehicleDetails(Vehicle.VehicleId))">
                View Details
            </button>
            <button type="button" class="button-21" @onclick="@(()=> EditVehicle(Vehicle.VehicleId))">
                <i class="fa-solid fa-pen-to-square" style="font-size:20px"></i>
            </button>
            <button type="button" class="button-21" @onclick="@(async ()=> await DeleteVehicle(Vehicle))">
                <i class="fa-solid fa-trash" style="font-size:20px;"></i>
            </button>
        </td>
    </tr>
}


@code {

    [Parameter]
    public Vehicle? Vehicle { get; set; }

    [Parameter]
    public EventCallback OnVehicleDeleted { get; set; }

    private void EditVehicle(int vehicleId)
    {
        NavigationManager.NavigateTo($"/editvehicle/{vehicleId}");
    }

    private async Task DeleteVehicle(Vehicle vehicle)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {vehicle.Registration}?"))
        {
            await DeleteVehicleUseCase.ExecuteAsync(vehicle.VehicleId);

            await OnVehicleDeleted.InvokeAsync();
        }
        
    }

    private void ViewVehicleDetails(int vehicleId)
    {
        NavigationManager.NavigateTo($"/vehicleview/{vehicleId}");
    }

}
