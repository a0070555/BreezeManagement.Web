@inject NavigationManager NavigationManager
@inject IDeleteVehicleUseCase DeleteVehicleUseCase

@if (Vehicle != null)
{
    <tr>
        <td>@Vehicle.Registration</td>
        <td>@Vehicle.ModelName</td>
        <td>@Vehicle.Colour</td>
        <td>@Vehicle.Price.ToString("c")</td>
        <td>@Vehicle.DateOfManufacture</td>
        <td>@Vehicle.NumberOfOwners</td>
        <td>@Vehicle.Mileage</td>
        @if (Vehicle.VehicleFeatures.Count == 0)
        {
            <td>This vehicle has no additional features</td>
        }
        else
        {
            <li class="button-21 dropdown-toggle form-control" href="/vehicles" @onclick="ToggleSubNavMenu" id="dropdown" style="block-size:25px; position:relative; top:8px;">
                Features
            </li>
        }
            @if (expandSubNavSettings)
            {
            <ul class="dropdown-menu show" aira-labelledby="dropdown" @onclick="ToggleSubNavMenu" style="background-color:#3EB2FD; 
            background-image: linear-gradient(1deg, #4F58FD, #149BF3 99%); font-family: CircularStd,sans-serif; font-size:0.8rem">
                <li class="nav-item">
                    @foreach (var v in Vehicle.VehicleFeatures)
                    {
                        <li class="dropdown-item">
                            <option style="color:white" disabled>@v.Feature.FeatureName</option>
                        </li>
                    }
                </li>
            </ul>
        }
        <td>
            <button type="button" class="button-21" @onclick="@(()=> EditVehicle(Vehicle.VehicleId))">
                <i class="fa-solid fa-pen-to-square" style="font-size:20px"></i>
            </button>
            <button type="button" class="button-21" @onclick="@(async ()=> await DeleteVehicle(Vehicle))">
                <i class="fa-solid fa-trash" style="font-size:20px;"></i>
            </button>
        </td>
    </tr>
}


@code {

    [Parameter]
    public Vehicle? Vehicle { get; set; }

    [Parameter]
    public EventCallback OnVehicleDeleted { get; set; }

    private void EditVehicle(int vehicleId)
    {
        NavigationManager.NavigateTo($"/editvehicle/{vehicleId}");
    }

    private async Task DeleteVehicle(Vehicle vehicle)
    {
        await DeleteVehicleUseCase.ExecuteAsync(vehicle.VehicleId);

        await OnVehicleDeleted.InvokeAsync();
    }

    bool collapseNavMenu = true;
    private bool expandSubNavSettings;
    private bool expandSubNavSettings1;

    string baseMenuClass = "navbar-collapse offcanvas-collapse";

    string NavMenuCssClass => baseMenuClass + (collapseNavMenu ? " collapse" : "");

    void ToggleNavMenu()
    {
        if (!expandSubNavSettings)
        {
            collapseNavMenu = !collapseNavMenu;
        }
    }

    void ToggleSubNavMenu()
    {
        expandSubNavSettings1 = false;
        expandSubNavSettings = !expandSubNavSettings;
    }

}
