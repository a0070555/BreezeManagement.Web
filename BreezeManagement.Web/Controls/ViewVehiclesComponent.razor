@using BreezeManagement.CoreBusiness
@inject IViewVehiclesByNameUseCase ViewVehiclesByNameUseCase

<div class="page">
    <div class="field field_v1">
        <label for="vehs" class="ha-screen-reader">Vehicles</label>
        <input class="field__input" placeholder="Type vehicle registration here to search" @bind-value="vehicleNameToSearch" bind-value:event="oninput" />
        <span class="field__label-wrap" aria-hidden="true">
            <span class="field__label">Registration</span>
        </span>
    </div>
    <button type="button" class="button-add"
            @onclick="@( async()=> { await ViewVehicles(); } )">
        <i class="fa-solid fa-magnifying-glass"></i> Search
    </button>
</div>

@if (this.DisplaySearchResult && _vehicles != null && selectedVehicle == null)
{
    <div style="overflow-y:auto; max-height:300px; border:1px solid black; padding-top:5px">
        <ul style="list-style-type:none">
            @foreach (var veh in _vehicles)
            {
            <button type="button" class="button-21">
                <li style="cursor:pointer" @onclick="@(async() => { await SelectVehicle(veh); })"
            @key="veh.VehicleId">@veh.Registration</li>
            </button>
            }
        </ul>
    </div>
}

@code {
    private string? _vehicleNameToSearch;
    public string vehicleNameToSearch
    {
        get => _vehicleNameToSearch;
        set
        {
            _vehicleNameToSearch = value;
            if (!string.IsNullOrWhiteSpace(_vehicleNameToSearch) &&
                _vehicleNameToSearch.Length > 2)
            {
                ViewVehicles();
            }
        }
    }

    private List<Vehicle>? _vehicles;
    private Vehicle? selectedVehicle;

    [Parameter]
    public EventCallback<List<Vehicle>> OnSearchVehicles { get; set; }

    [Parameter]
    public bool DisplaySearchResult { get; set; } = false;

    [Parameter]
    public EventCallback<Vehicle> OnSelectVehicle { get; set; }

    private async Task ViewVehicles()
    {
        var vehicles = (await ViewVehiclesByNameUseCase
        .ExecuteAsync(vehicleNameToSearch ?? string.Empty)).ToList();

        await OnSearchVehicles.InvokeAsync(vehicles);
        _vehicles = vehicles;
        this.selectedVehicle = null;

        StateHasChanged();

    }

    private async Task SelectVehicle(Vehicle vehicle)
    {
        await OnSelectVehicle.InvokeAsync(vehicle);
        selectedVehicle = vehicle;
    }

}
